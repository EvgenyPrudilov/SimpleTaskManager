// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Users {
//   id        Int      @id @default(autoincrement())
//   email     String   @unique
//   name      String   @unique

//   @@map("users")
// }

model Users {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  token     String   
  //password  String
  //createdAt DateTime @default(now())
  //updatedAt DateTime @updatedAt
  projects  Projects[] // Проекты, созданные пользователем
  tasks     Tasks[]    // Задачи, назначенные пользователю

  @@map("users")
}

model Projects {
  id          Int      @id @default(autoincrement())
  name       String    @unique
  description String?
  createdAt   DateTime @default(now())
  // updatedAt   DateTime @updatedAt
  creatorId   Int
  user        Users     @relation(fields: [creatorId], references: [id])
  tasks       Tasks[]   

  @@map("projects")
}

model Tasks {
  id          Int      @id @default(autoincrement())
  // title       String
  description String?
  dueDate     DateTime
  status      TaskStatus @default(CREATED)
  createdAt   DateTime @default(now())
  startedAt   DateTime?
  finishedAt  DateTime?
  timeUsed    Int?
  projectId   Int
  project     Projects  @relation(fields: [projectId], references: [id])
  assigneeId  Int?
  assignee    Users?    @relation(fields: [assigneeId], references: [id])
  // timeLogs    TimeLog[] // Логи времени выполнения задачи

  @@map("tasks")
}

enum TaskStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
}
